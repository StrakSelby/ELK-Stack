---
clusterName: "elasticsearch"
nodeGroup: "master"
replicas: 1

esConfig: 
  elasticsearch.yml: |
      cluster.name: elasticsearch
      node.name: es01
      network.host: 0.0.0.0
      bootstrap.memory_lock: true
      discovery.type: single-node
      xpack.security.enabled: true
      xpack.security.http.ssl.enabled: true
      xpack.security.http.ssl.key: /usr/share/elasticsearch/config/certs/es01/es01.key
      xpack.security.http.ssl.certificate: /usr/share/elasticsearch/config/certs/es01/es01.crt
      xpack.security.http.ssl.certificate_authorities: ["/usr/share/elasticsearch/config/certs/ca/ca.crt"]
      xpack.security.transport.ssl.enabled: true
      xpack.security.transport.ssl.key: /usr/share/elasticsearch/config/certs/es01/es01.key
      xpack.security.transport.ssl.certificate: /usr/share/elasticsearch/config/certs/es01/es01.crt
      xpack.security.transport.ssl.certificate_authorities: ["/usr/share/elasticsearch/config/certs/ca/ca.crt"]
      xpack.security.transport.ssl.verification_mode: certificate
      xpack.license.self_generated.type: basic

secret:
  enabled: true
  password: "changeme"

image: "docker.elastic.co/elasticsearch/elasticsearch"
imageTag: "8.5.1"
imagePullPolicy: "IfNotPresent"

resources:
  requests:
    cpu: "1000m"
    memory: "2Gi"
  limits:
    cpu: "1000m"
    memory: "2Gi"

volumeClaimTemplate:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 2Gi

extraVolumeMounts:
  - name: cert
    mountPath: /usr/share/elasticsearch/config/certs
  - name: esdata01
    mountPath: /usr/share/elasticsearch/data

service:
  type: NodePort
  port: 9200
  nodePort: 30000

lifecycle:
  postStart:
    exec:
      command: 
        - bash
        - -c
        - |
          # x flag tells Bash to execute the script in debug mode.
          if [ x$"changeme" == x ]; then
            echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
            exit 1;
          elif [ x$"changeme" == x ]; then
            echo "Set the KIBANA_PASSWORD environment variable in the .env file";
            exit 1;
          fi;
          if [ ! -f config/certs/ca.zip ]; then
            echo "Creating CA";
            bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
            unzip config/certs/ca.zip -d config/certs;
          fi;
          if [ ! -f config/certs/certs.zip ]; then
            echo "Creating certs";
            echo -ne \
            "instances:\n"\
            "  - name: es01\n"\
            "    dns:\n"\
            "      - es01\n"\
            "      - localhost\n"\
            "    ip:\n"\
            "      - 127.0.0.1\n"\
            "  - name: kibana\n"\
            "    dns:\n"\
            "      - kibana\n"\
            "      - localhost\n"\
            "    ip:\n"\
            "      - 127.0.0.1\n"\
            > config/certs/instances.yml;
            bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
            unzip config/certs/certs.zip -d config/certs;
          fi;
            echo "Setting file permissions";
            chown -R root:root config/certs;
            find . -type d -exec chmod 750 \{\} \;;
            find . -type f -exec chmod 640 \{\} \;;
            echo "Waiting for Elasticsearch availability";
            until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
            echo "Setting kibana_system password";
            until crl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"$""changeme"\"}" | grep -q "^{}"; do sleep 10; done;
            echo "All done!";
        